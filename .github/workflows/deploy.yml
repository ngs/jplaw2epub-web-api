name: Deploy to Cloud Run

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      deploy_method:
        description: "Deployment method"
        required: false
        default: "source"
        type: choice
        options:
          - source
          - artifact-registry
          - cloud-build

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: asia-northeast1
  SERVICE_NAME: jplaw2epub-api
  REPOSITORY: cloud-run-source-deploy
  CORS_ORIGINS: ${{ secrets.CORS_ORIGINS || '' }}

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      # Check configuration
      - name: "Verify configuration"
        run: |
          echo "Configuration:"
          echo "  PROJECT_ID: ${PROJECT_ID}"
          echo "  SERVICE_NAME: ${SERVICE_NAME}"
          echo "  REGION: ${REGION}"
          
          if [ -z "${PROJECT_ID}" ]; then
            echo "ERROR: PROJECT_ID is not set in GitHub secrets"
            exit 1
          fi
          
          # Set default project
          gcloud config set project ${PROJECT_ID}
          
          # Check if APIs are enabled
          echo ""
          echo "Checking required APIs..."
          for api in cloudbuild.googleapis.com run.googleapis.com artifactregistry.googleapis.com; do
            if gcloud services list --enabled --filter="name:${api}" --format="value(name)" | grep -q "${api}"; then
              echo "  ✓ ${api}"
            else
              echo "  ✗ ${api} - enabling..."
              gcloud services enable ${api} --project=${PROJECT_ID}
            fi
          done

      # Method 1: Deploy from source (default, simplest)
      - name: "Deploy from source"
        if: github.event_name == 'push' || github.event.inputs.deploy_method == 'source'
        run: |
          echo "Deploying from source code..."
          echo "Project: ${PROJECT_ID}"
          echo "Service: ${SERVICE_NAME}"
          echo "Region: ${REGION}"
          
          # Deploy with explicit project
          # Note: PORT env var is automatically set by Cloud Run, don't set it manually
          
          # Build environment variables command
          ENV_VARS_CMD=""
          if [ -n "${CORS_ORIGINS}" ]; then
            # Escape CORS_ORIGINS value for gcloud command
            # Use caret (^) as separator instead of comma for gcloud
            ENV_VARS_CMD="--set-env-vars=^@^CORS_ORIGINS=${CORS_ORIGINS}"
          fi
          
          gcloud run deploy ${SERVICE_NAME} \
            --source . \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --cpu=1 \
            --memory=512Mi \
            --max-instances=10 \
            ${ENV_VARS_CMD} \
            --quiet || {
              echo "Deployment failed. Checking for common issues..."
              echo ""
              echo "Checking if Cloud Build service account has permissions..."
              PROJECT_NUMBER=$(gcloud projects describe ${PROJECT_ID} --format="value(projectNumber)")
              CLOUD_BUILD_SA="${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com"
              echo "Cloud Build SA: ${CLOUD_BUILD_SA}"
              
              echo ""
              echo "To fix permissions, run locally:"
              echo "  export PROJECT_ID=${PROJECT_ID}"
              echo "  ./scripts/gcp-setup.sh permissions"
              exit 1
            }

      # Method 2: Deploy via Artifact Registry
      - name: "Setup Artifact Registry"
        if: github.event.inputs.deploy_method == 'artifact-registry'
        run: |
          # Create repository if it doesn't exist
          gcloud artifacts repositories create ${REPOSITORY} \
            --repository-format=docker \
            --location=${REGION} \
            --description="Docker repository for Cloud Run" || echo "Repository might already exist"

          # Configure Docker authentication
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      - name: "Build and push to Artifact Registry"
        if: github.event.inputs.deploy_method == 'artifact-registry'
        run: |
          IMAGE_TAG="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:${GITHUB_SHA}"
          IMAGE_LATEST="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:latest"

          echo "Building Docker image..."
          docker build -t "${IMAGE_TAG}" -t "${IMAGE_LATEST}" -f Dockerfile .

          echo "Pushing to Artifact Registry..."
          docker push "${IMAGE_TAG}"
          docker push "${IMAGE_LATEST}"

          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: "Deploy from Artifact Registry"
        if: github.event.inputs.deploy_method == 'artifact-registry'
        run: |
          echo "Deploying from Artifact Registry..."
          
          # Build environment variables command
          ENV_VARS_CMD=""
          if [ -n "${CORS_ORIGINS}" ]; then
            # Escape CORS_ORIGINS value for gcloud command
            # Use caret (^) as separator instead of comma for gcloud
            ENV_VARS_CMD="--set-env-vars=^@^CORS_ORIGINS=${CORS_ORIGINS}"
          fi
          
          gcloud run deploy ${SERVICE_NAME} \
            --image="${IMAGE_TAG}" \
            --region=${REGION} \
            --project=${PROJECT_ID} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --cpu=1 \
            --memory=512Mi \
            --max-instances=10 \
            ${ENV_VARS_CMD} \
            --quiet

      # Method 3: Deploy via Cloud Build
      - name: "Deploy via Cloud Build"
        if: github.event.inputs.deploy_method == 'cloud-build'
        run: |
          echo "Deploying via Cloud Build..."

          # Check if cloudbuild-ar.yaml exists, otherwise use cloudbuild.yaml
          if [ -f "cloudbuild-ar.yaml" ]; then
            CONFIG_FILE="cloudbuild-ar.yaml"
          else
            CONFIG_FILE="cloudbuild.yaml"
          fi

          # Build substitutions
          SUBSTITUTIONS="_SERVICE_NAME=${SERVICE_NAME},_REGION=${REGION},_REPOSITORY=${REPOSITORY}"
          if [ -n "${CORS_ORIGINS}" ]; then
            SUBSTITUTIONS="${SUBSTITUTIONS},_CORS_ORIGINS=${CORS_ORIGINS}"
          fi
          
          gcloud builds submit \
            --config=${CONFIG_FILE} \
            --project=${PROJECT_ID} \
            --region=${REGION} \
            --substitutions=${SUBSTITUTIONS} \
            .

      # Common post-deployment steps
      - name: "Get service URL"
        run: |
          SERVICE_URL=$(gcloud run services describe ${SERVICE_NAME} \
            --region=${REGION} \
            --format='value(status.url)')
          echo "Service deployed to: ${SERVICE_URL}"
          echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_ENV

      - name: "Wait for service to be ready"
        run: |
          echo "Waiting for service to be fully ready..."
          for i in {1..30}; do
            if curl -f "${SERVICE_URL}/health" 2>/dev/null; then
              echo "Service is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Service health check failed after 30 attempts"
              exit 1
            fi
            echo "Attempt $i/30: Service not ready yet, waiting..."
            sleep 2
          done

      - name: "Test deployment"
        run: |
          echo "Testing health endpoint..."
          curl -f "${SERVICE_URL}/health" || exit 1

          echo ""
          echo "Testing GraphQL endpoint..."
          RESPONSE=$(curl -s -X POST "${SERVICE_URL}/graphql" \
            -H "Content-Type: application/json" \
            -d '{"query": "{ laws(limit: 1) { totalCount } }"}')

          echo "Response: ${RESPONSE}"

          # Check if response contains errors
          if echo "${RESPONSE}" | grep -q '"errors"'; then
            echo "GraphQL endpoint returned errors"
            exit 1
          fi

          echo ""
          echo "✅ Deployment successful!"
          echo "🌐 Service URL: ${SERVICE_URL}"

      - name: "Display deployment summary"
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  Deployment Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  Service: ${SERVICE_NAME}"
          echo "  Region: ${REGION}"
          echo "  URL: ${SERVICE_URL:-Not available}"
          echo "  Method: ${{ github.event.inputs.deploy_method || 'source' }}"
          echo "  Commit: ${GITHUB_SHA:0:7}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
