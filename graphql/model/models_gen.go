// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Epub struct {
	ID        string     `json:"id"`
	SignedURL *string    `json:"signedUrl,omitempty"`
	Size      *int       `json:"size,omitempty"`
	Status    EpubStatus `json:"status"`
	Error     *string    `json:"error,omitempty"`
}

type Query struct {
}

type CategoryCode string

const (
	CategoryCodeConstitution         CategoryCode = "CONSTITUTION"
	CategoryCodeCriminal             CategoryCode = "CRIMINAL"
	CategoryCodeFinanceGeneral       CategoryCode = "FINANCE_GENERAL"
	CategoryCodeFisheries            CategoryCode = "FISHERIES"
	CategoryCodeTourism              CategoryCode = "TOURISM"
	CategoryCodeParliament           CategoryCode = "PARLIAMENT"
	CategoryCodePolice               CategoryCode = "POLICE"
	CategoryCodeNationalProperty     CategoryCode = "NATIONAL_PROPERTY"
	CategoryCodeMining               CategoryCode = "MINING"
	CategoryCodePostalService        CategoryCode = "POSTAL_SERVICE"
	CategoryCodeAdministrativeOrg    CategoryCode = "ADMINISTRATIVE_ORG"
	CategoryCodeFireService          CategoryCode = "FIRE_SERVICE"
	CategoryCodeNationalTax          CategoryCode = "NATIONAL_TAX"
	CategoryCodeIndustry             CategoryCode = "INDUSTRY"
	CategoryCodeTelecommunications   CategoryCode = "TELECOMMUNICATIONS"
	CategoryCodeCivilService         CategoryCode = "CIVIL_SERVICE"
	CategoryCodeNationalDevelopment  CategoryCode = "NATIONAL_DEVELOPMENT"
	CategoryCodeBusiness             CategoryCode = "BUSINESS"
	CategoryCodeCommerce             CategoryCode = "COMMERCE"
	CategoryCodeLabor                CategoryCode = "LABOR"
	CategoryCodeAdministrativeProc   CategoryCode = "ADMINISTRATIVE_PROC"
	CategoryCodeLand                 CategoryCode = "LAND"
	CategoryCodeNationalBonds        CategoryCode = "NATIONAL_BONDS"
	CategoryCodeFinanceInsurance     CategoryCode = "FINANCE_INSURANCE"
	CategoryCodeEnvironmentalProtect CategoryCode = "ENVIRONMENTAL_PROTECT"
	CategoryCodeStatistics           CategoryCode = "STATISTICS"
	CategoryCodeCityPlanning         CategoryCode = "CITY_PLANNING"
	CategoryCodeEducation            CategoryCode = "EDUCATION"
	CategoryCodeForeignExchangeTrade CategoryCode = "FOREIGN_EXCHANGE_TRADE"
	CategoryCodePublicHealth         CategoryCode = "PUBLIC_HEALTH"
	CategoryCodeLocalGovernment      CategoryCode = "LOCAL_GOVERNMENT"
	CategoryCodeRoads                CategoryCode = "ROADS"
	CategoryCodeCulture              CategoryCode = "CULTURE"
	CategoryCodeLandTransport        CategoryCode = "LAND_TRANSPORT"
	CategoryCodeSocialWelfare        CategoryCode = "SOCIAL_WELFARE"
	CategoryCodeLocalFinance         CategoryCode = "LOCAL_FINANCE"
	CategoryCodeRivers               CategoryCode = "RIVERS"
	CategoryCodeIndustryGeneral      CategoryCode = "INDUSTRY_GENERAL"
	CategoryCodeMaritimeTransport    CategoryCode = "MARITIME_TRANSPORT"
	CategoryCodeSocialInsurance      CategoryCode = "SOCIAL_INSURANCE"
	CategoryCodeJudiciary            CategoryCode = "JUDICIARY"
	CategoryCodeDisasterManagement   CategoryCode = "DISASTER_MANAGEMENT"
	CategoryCodeAgriculture          CategoryCode = "AGRICULTURE"
	CategoryCodeAviation             CategoryCode = "AVIATION"
	CategoryCodeDefense              CategoryCode = "DEFENSE"
	CategoryCodeCivil                CategoryCode = "CIVIL"
	CategoryCodeBuildingHousing      CategoryCode = "BUILDING_HOUSING"
	CategoryCodeForestry             CategoryCode = "FORESTRY"
	CategoryCodeFreightTransport     CategoryCode = "FREIGHT_TRANSPORT"
	CategoryCodeForeignAffairs       CategoryCode = "FOREIGN_AFFAIRS"
)

var AllCategoryCode = []CategoryCode{
	CategoryCodeConstitution,
	CategoryCodeCriminal,
	CategoryCodeFinanceGeneral,
	CategoryCodeFisheries,
	CategoryCodeTourism,
	CategoryCodeParliament,
	CategoryCodePolice,
	CategoryCodeNationalProperty,
	CategoryCodeMining,
	CategoryCodePostalService,
	CategoryCodeAdministrativeOrg,
	CategoryCodeFireService,
	CategoryCodeNationalTax,
	CategoryCodeIndustry,
	CategoryCodeTelecommunications,
	CategoryCodeCivilService,
	CategoryCodeNationalDevelopment,
	CategoryCodeBusiness,
	CategoryCodeCommerce,
	CategoryCodeLabor,
	CategoryCodeAdministrativeProc,
	CategoryCodeLand,
	CategoryCodeNationalBonds,
	CategoryCodeFinanceInsurance,
	CategoryCodeEnvironmentalProtect,
	CategoryCodeStatistics,
	CategoryCodeCityPlanning,
	CategoryCodeEducation,
	CategoryCodeForeignExchangeTrade,
	CategoryCodePublicHealth,
	CategoryCodeLocalGovernment,
	CategoryCodeRoads,
	CategoryCodeCulture,
	CategoryCodeLandTransport,
	CategoryCodeSocialWelfare,
	CategoryCodeLocalFinance,
	CategoryCodeRivers,
	CategoryCodeIndustryGeneral,
	CategoryCodeMaritimeTransport,
	CategoryCodeSocialInsurance,
	CategoryCodeJudiciary,
	CategoryCodeDisasterManagement,
	CategoryCodeAgriculture,
	CategoryCodeAviation,
	CategoryCodeDefense,
	CategoryCodeCivil,
	CategoryCodeBuildingHousing,
	CategoryCodeForestry,
	CategoryCodeFreightTransport,
	CategoryCodeForeignAffairs,
}

func (e CategoryCode) IsValid() bool {
	switch e {
	case CategoryCodeConstitution, CategoryCodeCriminal, CategoryCodeFinanceGeneral, CategoryCodeFisheries, CategoryCodeTourism, CategoryCodeParliament, CategoryCodePolice, CategoryCodeNationalProperty, CategoryCodeMining, CategoryCodePostalService, CategoryCodeAdministrativeOrg, CategoryCodeFireService, CategoryCodeNationalTax, CategoryCodeIndustry, CategoryCodeTelecommunications, CategoryCodeCivilService, CategoryCodeNationalDevelopment, CategoryCodeBusiness, CategoryCodeCommerce, CategoryCodeLabor, CategoryCodeAdministrativeProc, CategoryCodeLand, CategoryCodeNationalBonds, CategoryCodeFinanceInsurance, CategoryCodeEnvironmentalProtect, CategoryCodeStatistics, CategoryCodeCityPlanning, CategoryCodeEducation, CategoryCodeForeignExchangeTrade, CategoryCodePublicHealth, CategoryCodeLocalGovernment, CategoryCodeRoads, CategoryCodeCulture, CategoryCodeLandTransport, CategoryCodeSocialWelfare, CategoryCodeLocalFinance, CategoryCodeRivers, CategoryCodeIndustryGeneral, CategoryCodeMaritimeTransport, CategoryCodeSocialInsurance, CategoryCodeJudiciary, CategoryCodeDisasterManagement, CategoryCodeAgriculture, CategoryCodeAviation, CategoryCodeDefense, CategoryCodeCivil, CategoryCodeBuildingHousing, CategoryCodeForestry, CategoryCodeFreightTransport, CategoryCodeForeignAffairs:
		return true
	}
	return false
}

func (e CategoryCode) String() string {
	return string(e)
}

func (e *CategoryCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryCode", str)
	}
	return nil
}

func (e CategoryCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CategoryCode) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CategoryCode) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type CurrentRevisionStatus string

const (
	CurrentRevisionStatusCurrentEnforced  CurrentRevisionStatus = "CURRENT_ENFORCED"
	CurrentRevisionStatusUnenforced       CurrentRevisionStatus = "UNENFORCED"
	CurrentRevisionStatusPreviousEnforced CurrentRevisionStatus = "PREVIOUS_ENFORCED"
	CurrentRevisionStatusRepeal           CurrentRevisionStatus = "REPEAL"
)

var AllCurrentRevisionStatus = []CurrentRevisionStatus{
	CurrentRevisionStatusCurrentEnforced,
	CurrentRevisionStatusUnenforced,
	CurrentRevisionStatusPreviousEnforced,
	CurrentRevisionStatusRepeal,
}

func (e CurrentRevisionStatus) IsValid() bool {
	switch e {
	case CurrentRevisionStatusCurrentEnforced, CurrentRevisionStatusUnenforced, CurrentRevisionStatusPreviousEnforced, CurrentRevisionStatusRepeal:
		return true
	}
	return false
}

func (e CurrentRevisionStatus) String() string {
	return string(e)
}

func (e *CurrentRevisionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CurrentRevisionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CurrentRevisionStatus", str)
	}
	return nil
}

func (e CurrentRevisionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CurrentRevisionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CurrentRevisionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type EpubStatus string

const (
	EpubStatusPending    EpubStatus = "PENDING"
	EpubStatusProcessing EpubStatus = "PROCESSING"
	EpubStatusCompleted  EpubStatus = "COMPLETED"
	EpubStatusFailed     EpubStatus = "FAILED"
)

var AllEpubStatus = []EpubStatus{
	EpubStatusPending,
	EpubStatusProcessing,
	EpubStatusCompleted,
	EpubStatusFailed,
}

func (e EpubStatus) IsValid() bool {
	switch e {
	case EpubStatusPending, EpubStatusProcessing, EpubStatusCompleted, EpubStatusFailed:
		return true
	}
	return false
}

func (e EpubStatus) String() string {
	return string(e)
}

func (e *EpubStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EpubStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EpubStatus", str)
	}
	return nil
}

func (e EpubStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *EpubStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e EpubStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type LawNumEra string

const (
	LawNumEraMeiji  LawNumEra = "MEIJI"
	LawNumEraTaisho LawNumEra = "TAISHO"
	LawNumEraShowa  LawNumEra = "SHOWA"
	LawNumEraHeisei LawNumEra = "HEISEI"
	LawNumEraReiwa  LawNumEra = "REIWA"
)

var AllLawNumEra = []LawNumEra{
	LawNumEraMeiji,
	LawNumEraTaisho,
	LawNumEraShowa,
	LawNumEraHeisei,
	LawNumEraReiwa,
}

func (e LawNumEra) IsValid() bool {
	switch e {
	case LawNumEraMeiji, LawNumEraTaisho, LawNumEraShowa, LawNumEraHeisei, LawNumEraReiwa:
		return true
	}
	return false
}

func (e LawNumEra) String() string {
	return string(e)
}

func (e *LawNumEra) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LawNumEra(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LawNumEra", str)
	}
	return nil
}

func (e LawNumEra) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LawNumEra) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LawNumEra) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type LawNumType string

const (
	LawNumTypeConstitution         LawNumType = "CONSTITUTION"
	LawNumTypeAct                  LawNumType = "ACT"
	LawNumTypeCabinetOrder         LawNumType = "CABINET_ORDER"
	LawNumTypeImperialOrder        LawNumType = "IMPERIAL_ORDER"
	LawNumTypeMinisterialOrdinance LawNumType = "MINISTERIAL_ORDINANCE"
	LawNumTypeRule                 LawNumType = "RULE"
	LawNumTypeMisc                 LawNumType = "MISC"
)

var AllLawNumType = []LawNumType{
	LawNumTypeConstitution,
	LawNumTypeAct,
	LawNumTypeCabinetOrder,
	LawNumTypeImperialOrder,
	LawNumTypeMinisterialOrdinance,
	LawNumTypeRule,
	LawNumTypeMisc,
}

func (e LawNumType) IsValid() bool {
	switch e {
	case LawNumTypeConstitution, LawNumTypeAct, LawNumTypeCabinetOrder, LawNumTypeImperialOrder, LawNumTypeMinisterialOrdinance, LawNumTypeRule, LawNumTypeMisc:
		return true
	}
	return false
}

func (e LawNumType) String() string {
	return string(e)
}

func (e *LawNumType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LawNumType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LawNumType", str)
	}
	return nil
}

func (e LawNumType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LawNumType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LawNumType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type LawType string

const (
	LawTypeConstitution         LawType = "CONSTITUTION"
	LawTypeAct                  LawType = "ACT"
	LawTypeCabinetOrder         LawType = "CABINET_ORDER"
	LawTypeImperialOrder        LawType = "IMPERIAL_ORDER"
	LawTypeMinisterialOrdinance LawType = "MINISTERIAL_ORDINANCE"
	LawTypeRule                 LawType = "RULE"
	LawTypeMisc                 LawType = "MISC"
)

var AllLawType = []LawType{
	LawTypeConstitution,
	LawTypeAct,
	LawTypeCabinetOrder,
	LawTypeImperialOrder,
	LawTypeMinisterialOrdinance,
	LawTypeRule,
	LawTypeMisc,
}

func (e LawType) IsValid() bool {
	switch e {
	case LawTypeConstitution, LawTypeAct, LawTypeCabinetOrder, LawTypeImperialOrder, LawTypeMinisterialOrdinance, LawTypeRule, LawTypeMisc:
		return true
	}
	return false
}

func (e LawType) String() string {
	return string(e)
}

func (e *LawType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LawType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LawType", str)
	}
	return nil
}

func (e LawType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LawType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LawType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Mission string

const (
	MissionNew     Mission = "NEW"
	MissionPartial Mission = "PARTIAL"
)

var AllMission = []Mission{
	MissionNew,
	MissionPartial,
}

func (e Mission) IsValid() bool {
	switch e {
	case MissionNew, MissionPartial:
		return true
	}
	return false
}

func (e Mission) String() string {
	return string(e)
}

func (e *Mission) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Mission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Mission", str)
	}
	return nil
}

func (e Mission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Mission) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Mission) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type RepealStatus string

const (
	RepealStatusNone                RepealStatus = "NONE"
	RepealStatusRepeal              RepealStatus = "REPEAL"
	RepealStatusExpire              RepealStatus = "EXPIRE"
	RepealStatusSuspend             RepealStatus = "SUSPEND"
	RepealStatusLossOfEffectiveness RepealStatus = "LOSS_OF_EFFECTIVENESS"
)

var AllRepealStatus = []RepealStatus{
	RepealStatusNone,
	RepealStatusRepeal,
	RepealStatusExpire,
	RepealStatusSuspend,
	RepealStatusLossOfEffectiveness,
}

func (e RepealStatus) IsValid() bool {
	switch e {
	case RepealStatusNone, RepealStatusRepeal, RepealStatusExpire, RepealStatusSuspend, RepealStatusLossOfEffectiveness:
		return true
	}
	return false
}

func (e RepealStatus) String() string {
	return string(e)
}

func (e *RepealStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepealStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepealStatus", str)
	}
	return nil
}

func (e RepealStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RepealStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RepealStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
